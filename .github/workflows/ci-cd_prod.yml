name: Production Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_and_test:
    runs-on: [self-hosted, bob-the-builder]
    environment: PRODUCTION

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Install Docker Compose
      - name: Install Docker Compose
        run: |
          if docker compose version &> /dev/null; then
            echo "Docker Compose is available"
          else
            echo "Docker Compose not found. Updating Docker."
            # Update Docker to the latest version that includes `docker compose`
            sudo apt-get update
            sudo apt-get remove docker docker-engine docker.io containerd runc
            curl -fsSL https://get.docker.com -o get-docker.sh
            sh get-docker.sh
          fi

      # Build the Docker images
      - name: Build Docker image
        run: |
          docker compose build --parallel
          docker tag clio-airflow-webserver:latest lhernandez0/clio-airflow-common:latest
          docker tag clio-clio_webserver:latest lhernandez0/clio-webserver:latest

      # List the Docker images
      - name: List Docker images
        run: |
          docker images

      # Run tests
      - name: Run tests
        run: |
          # Add your test commands here
          echo "Running tests..."
          # Example: docker compose run --rm app pytest

  push_and_deploy:
    needs: build_and_test
    runs-on: [self-hosted, bob-the-builder]
    environment: PRODUCTION
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      # Push Docker images to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Push Docker images
        run: |
          docker push lhernandez0/clio-airflow-common:latest
          docker push lhernandez0/clio-webserver:latest

      # Deploy to VPS using SSH
      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          script: |
            bash << 'EOT'
            set -euo pipefail

            # Clone the repository if it doesn't already exist
            if [ ! -d "clio" ]; then
              git clone https://github.com/lhernandez0/clio.git
            fi

            # Navigate to the repository directory
            cd clio

            # Delete the .env file if it exists
            rm -f .env

            # Create a new .env file with the secrets
            cat << EOF > .env
            AIRFLOW_IMAGE_NAME="${{ secrets.AIRFLOW_IMAGE_NAME }}"
            AIRFLOW_UID="${{ secrets.AIRFLOW_UID }}"
            AIRFLOW_PROJ_DIR="${{ secrets.AIRFLOW_PROJ_DIR }}"
            _AIRFLOW_WWW_USER_USERNAME="${{ secrets._AIRFLOW_WWW_USER_USERNAME }}"
            _AIRFLOW_WWW_USER_PASSWORD="${{ secrets._AIRFLOW_WWW_USER_PASSWORD }}"
            MODELS_DIR="${{ secrets.MODELS_DIR }}"
            OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}"
            EOF

            # Fetch the latest changes
            git fetch origin
            git checkout main || git checkout -b main origin/main
            git pull

            # Create Airflow logs directory
            mkdir -p "${{ secrets.AIRFLOW_PROJ_DIR }}/logs"

            # Install Docker Compose if not already installed
            if docker compose version &> /dev/null; then
              echo "Docker Compose is available"
            else
              echo "Docker Compose not found. Updating Docker."
              # Update Docker to the latest version that includes `docker compose`
              sudo apt-get update
              sudo apt-get remove docker docker-engine docker.io containerd runc
              curl -fsSL https://get.docker.com -o get-docker.sh
              sh get-docker.sh
            fi

            # Pull the latest Docker images
            docker compose --env-file .env -f docker-compose.deploy.yaml pull

            # Stop and remove old containers and networks
            docker compose --env-file .env -f docker-compose.deploy.yaml down

            # Run the new containers
            docker compose --env-file .env -f docker-compose.deploy.yaml up -d
            EOT
